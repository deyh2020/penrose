canvas {
   width = 240
   height = 180
}

Colors {
   color black = rgba(0,0,0,1)
   color white = rgba(1,1,1,1)
   color darkGray = rgba(.5,.5,.5,1)
   color lightGray = rgba(.9,.9,.9,1)
}

Global {
   shape domain = Polygon {
      points: ((-117,-57.3), (2.6,-89), (118.6,-48), (97.8,89), (-18.4,67.7), (-80.5,89))
      fillColor: Colors.lightGray
      strokeColor: Colors.darkGray
      strokeWidth: 2.
      ensureOnCanvas: false
      cornerRadius: 10.
   }

   shape domainName = Text {
      string: "Î©"
      center: (?,?)
      fontSize: "9px"
      fontFamily: "Palatino"
      fillColor: Colors.darkGray
   }

   layer domainName above domain

   ensure lessThan( signedDistance( domain, Global.domainName.center ), -10. )

   baseWidth = 1.5
}

forall Step s {
   shape s.boundary = Circle {
      center: (?,?)
      r: 1.
      --fillColor: rgba( .2, .6, .2, .2 )
      fillColor: none()
      strokeColor: Colors.black
      strokeWidth: Global.baseWidth
      ensureOnCanvas: false
   }

   -- signedDistance( shape, vec2 )

   shape s.centerDot = Circle {
      center: s.boundary.center
      r: 2.5
      fillColor: Colors.black
      ensureOnCanvas: false
   }

   vec2 c = s.boundary.center
   scalar w = canvas.width
   scalar h = canvas.height
   --scalar R = min( min( min( w/2-c[0], c[0]+w/2. ), h/2-c[1] ), c[1]+h/2. )
   scalar R = -signedDistance( Global.domain, c )
   override s.boundary.r = R - Global.baseWidth/2.

   ensure inRange( c[0], -w/2, w/2 )
   ensure inRange( c[1], -h/2, h/2 )

   shape s.ball = Image {
      center: s.boundary.center 
      width: s.boundary.r * 2.0
      height: s.boundary.r * 2.0
      href: "ball.svg"
      ensureOnCanvas: false
   }

   layer s.boundary above Global.domain
   layer s.centerDot above Global.domain
   layer s.ball above Global.domain
   layer s.ball below s.boundary
}

forall Step s
where s has label {

   shape s.labelText = Text {
      string: s.label
      center: (?,?)
      fontSize: "9px"
      fontFamily: "Palatino"
      fontStyle: "italic"
      fillColor: Colors.black
      strokeColor: Colors.white
      strokeWidth: 2.5
      strokeLinejoin: "round"
      paintOrder: "stroke"
   }

   encourage near( s.labelText, s.centerDot )
   ensure disjoint( s.labelText, s.centerDot, 2. )

   layer s.labelText above s.boundary
}

forall Step x0; Step x1
where Next(x0,x1) {
   ensure equal( norm(x1.boundary.center-x0.boundary.center), x0.boundary.r )
   layer x1.boundary above x0.boundary

   ensure equal( x1.boundary.r, .55*x0.boundary.r )
}

forall Step x {
   ensure disjoint( Global.domainName, x.boundary, 10. )
}

