canvas {
  width = 800
  height = 700
}

forall Frames f {
  f.d = ?
  f.r1 = ?
  f.r2 = ?
  f.r3 = ?
  f.y = ?
  f.ylab = ?
  ensure lessThan(200, f.d)
  ensure lessThan(f.d, 500)
  ensure lessThan(8, f.r1)
  ensure lessThan(f.r1, f.r2)
  ensure lessThan(15, f.r2)
  ensure lessThan(f.r2, f.r3)
  ensure lessThan(25, f.r3)
  encourage lessThan(f.ylab - f.y, 400)

  f.axis = Line {
    strokeColor: rgba(0.0, 0.0, 0.0, 0.5)
    strokeWidth: 2
    endArrowhead: true
    start: (-1.5 * f.d, f.y)
    end: (1.5 * f.d, f.y)
    arrowheadSize: 0.7
  }

  f.dot0 = Circle {
    center: (-1.5 * f.d, f.y)
    r: 4
    fillColor: rgba(0.0, 0.0, 0.0, 1.0)
  }
  f.dot1 = Circle {
    center: ((-1.5 + 2.7 * f.r1 / f.r3) * f.d, f.y)
    r: 4
    fillColor: rgba(0.0, 0.0, 0.0, 1.0)
  }
  f.dot2 = Circle {
    center: ((-1.5 + 2.7 * f.r2 / f.r3) * f.d, f.y)
    r: 4
    fillColor: rgba(0.0, 0.0, 0.0, 1.0)
  }
  f.dot3 = Circle {
    center: (1.2 * f.d, f.y)
    r: 4
    fillColor: rgba(0.0, 0.0, 0.0, 1.0)
  }

  f.eps0 = Equation {
    string: "0"
    center: (f.dot0.center[0] - 20, f.dot0.center[1])
  }
  f.eps = Equation {
    string: "\varepsilon"
    center: (1.5 * f.d + 20, f.dot0.center[1])
  }
  f.eps1 = Equation {
    string: "\varepsilon_1"
    center: (f.dot1.center[0] + 20, f.dot1.center[1] - 10)
    fillColor: rgba(0.2, 0.8, 0.2, 0.8)
  }
  f.eps2 = Equation {
    string: "\varepsilon_2"
    center: (f.dot2.center[0] + 20, f.dot2.center[1] - 10)
    fillColor: rgba(1.0, 0.2, 0.2, 0.8)
  }
  f.eps3 = Equation {
    string: "\varepsilon_3"
    center: (f.dot3.center[0] + 20, f.dot3.center[1] - 10)
    fillColor: rgba(0.2, 0.2, 1.0, 0.8)
  }

  f.lab1 = Equation {
    string: "X \oplus B_{\varepsilon_{1}}"
    fillColor: rgba(0.2, 0.8, 0.2, 0.8)
    center: (f.dot1.center[0], f.ylab)
  }
  f.lab2 = Equation {
    string: "X \oplus B_{\varepsilon_{2}}"
    fillColor: rgba(1.0, 0.2, 0.2, 0.8)
    center: (f.dot2.center[0], f.ylab)
  }
  f.lab3 = Equation {
    string: "X \oplus B_{\varepsilon_{3}}"
    fillColor: rgba(0.2, 0.2, 1.0, 0.8)
    center: (f.dot3.center[0], f.ylab)
  }

}

forall Point p {
  p.x = ?
  p.d12 = ?
  p.d23 = ?
  p.y = ?
  p.r1 = ?
  p.r2 = ?
  p.r3 = ?

  p.dot1 = Circle {
    center: (p.x - p.d12, p.y)
    r: 3
    fillColor: rgba(0.0, 0.0, 0.0, 1.0)
  }
  p.dot2 = Circle {
    center: (p.x, p.y)
    r: 3
    fillColor: rgba(0.0, 0.0, 0.0, 1.0)
  }
  p.dot3 = Circle {
    center: (p.x + p.d23, p.y)
    r: 3
    fillColor: rgba(0.0, 0.0, 0.0, 1.0)
  }
  p.circle1 = Circle {
    center: (p.x - p.d12, p.y)
    r: p.r1
    fillColor: rgba(0.2, 0.8, 0.2, 0.3)
  }
  p.circle2 = Circle {
    center: (p.x, p.y)
    r: p.r2
    fillColor: rgba(1.0, 0.2, 0.2, 0.3)
  }
  p.circle3 = Circle {
    center: (p.x + p.d23, p.y)
    r: p.r3
    fillColor: rgba(0.2, 0.2, 1.0, 0.3)
  }
  p.dot1 above p.circle1
  p.dot2 above p.circle2
  p.dot3 above p.circle3

}

forall Point p; Frames f {
  ensure equal(p.d12, f.dot2.center[0] - f.dot1.center[0])
  ensure equal(p.d23, f.dot3.center[0] - f.dot2.center[0])
  ensure equal(p.r1, f.r1)
  ensure equal(p.r2, f.r2)
  ensure equal(p.r3, f.r3)
  ensure lessThan(f.y, p.y - p.r3 - 30)
  ensure lessThan(p.y + p.r3 + 30, f.ylab)
}

forall Point p1; Point p2 {
  ensure lessThan(abs(p1.x - p2.x) + 100.0, p1.d12)
  ensure lessThan(abs(p1.x - p2.x) + 100.0, p1.d23)
}

forall Point p1; Point p2 
where NotConnectedOnFrame1(p1, p2) {
    ensure disjoint(p1.circle1, p2.circle1, 10)
}

forall Point p1; Point p2 
where NotConnectedOnFrame2(p1, p2) {
    ensure disjoint(p1.circle2, p2.circle2, 10)
}

forall Point p1; Point p2 
where NotConnectedOnFrame3(p1, p2) {
    ensure disjoint(p1.circle3, p2.circle3, 10)
}

forall Point p1; Point p2 
where ConnectedOnFrame1(p1, p2) {
    ensure overlapping(p1.circle1, p2.circle1, -7)
}

forall Point p1; Point p2 
where ConnectedOnFrame2(p1, p2) {
    ensure overlapping(p1.circle2, p2.circle2, -7)
}

forall Point p1; Point p2 
where ConnectedOnFrame3(p1, p2) {
    ensure overlapping(p1.circle3, p2.circle3, -7)
}

forall Connection c; Point p1; Point p2
where c := MakeConnection1(p1, p2) {
    c.line = Line {
        start: p1.dot1.center
        end: p2.dot1.center
        strokeColor: rgba(0.0, 0.0, 0.0, 1.0)
        strokeWidth: 3
    }
}

forall Connection c; Point p1; Point p2
where c := MakeConnection2(p1, p2) {
    c.line = Line {
        start: p1.dot2.center
        end: p2.dot2.center
        strokeColor: rgba(0.0, 0.0, 0.0, 1.0)
        strokeWidth: 3
    }
}

forall Connection c; Point p1; Point p2
where c := MakeConnection3(p1, p2) {
    c.line = Line {
        start: p1.dot3.center
        end: p2.dot3.center
        strokeColor: rgba(0.0, 0.0, 0.0, 1.0)
        strokeWidth: 3
    }
}
